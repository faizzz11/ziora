{
  "operating-system": [
    {
      "experimentNo": 1,
      "title": "Process Creation and Management",
      "aim": "To understand and implement process creation using fork() system call in Linux/Unix environment.",
      "theory": "A process is a program in execution. In Unix/Linux systems, the fork() system call is used to create a new process. When fork() is called, it creates an exact copy of the calling process. The original process is called the parent process, and the newly created process is called the child process.",
      "code": "#include <stdio.h>\n#include <unistd.h>\n#include <sys/wait.h>\n\nint main() {\n    pid_t pid;\n    int status;\n    \n    printf(\"Before fork()\\n\");\n    \n    pid = fork();\n    \n    if (pid == 0) {\n        // Child process\n        printf(\"This is child process with PID: %d\\n\", getpid());\n        printf(\"Parent PID: %d\\n\", getppid());\n    } else if (pid > 0) {\n        // Parent process\n        printf(\"This is parent process with PID: %d\\n\", getpid());\n        printf(\"Child PID: %d\\n\", pid);\n        wait(&status);\n        printf(\"Child process completed\\n\");\n    } else {\n        // Fork failed\n        printf(\"Fork failed\\n\");\n        return 1;\n    }\n    \n    return 0;\n}",
      "output": "Before fork()\nThis is parent process with PID: 1234\nChild PID: 1235\nThis is child process with PID: 1235\nParent PID: 1234\nChild process completed",
      "conclusion": "The experiment successfully demonstrates process creation using fork() system call. The parent and child processes execute independently, and the parent waits for the child to complete execution.",
      "videoUrl": "https://www.youtube.com/embed/PZrQ4e5jnpU"
    },
    {
      "experimentNo": 2,
      "title": "CPU Scheduling Algorithms - FCFS",
      "aim": "To implement First Come First Serve (FCFS) CPU scheduling algorithm.",
      "theory": "FCFS is the simplest CPU scheduling algorithm. In this algorithm, the process that arrives first is allocated to the CPU first. It is a non-preemptive algorithm where once a process starts executing, it runs to completion without interruption.",
      "code": "#include <stdio.h>\n\nstruct Process {\n    int pid;\n    int arrivalTime;\n    int burstTime;\n    int waitingTime;\n    int turnaroundTime;\n};\n\nvoid calculateTimes(struct Process processes[], int n) {\n    int currentTime = 0;\n    \n    for (int i = 0; i < n; i++) {\n        if (currentTime < processes[i].arrivalTime) {\n            currentTime = processes[i].arrivalTime;\n        }\n        \n        processes[i].waitingTime = currentTime - processes[i].arrivalTime;\n        processes[i].turnaroundTime = processes[i].waitingTime + processes[i].burstTime;\n        currentTime += processes[i].burstTime;\n    }\n}\n\nint main() {\n    int n = 3;\n    struct Process processes[] = {\n        {1, 0, 5, 0, 0},\n        {2, 1, 3, 0, 0},\n        {3, 2, 8, 0, 0}\n    };\n    \n    calculateTimes(processes, n);\n    \n    printf(\"PID\\tAT\\tBT\\tWT\\tTAT\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d\\t%d\\t%d\\t%d\\t%d\\n\", \n               processes[i].pid,\n               processes[i].arrivalTime,\n               processes[i].burstTime,\n               processes[i].waitingTime,\n               processes[i].turnaroundTime);\n    }\n    \n    return 0;\n}",
      "output": "PID\tAT\tBT\tWT\tTAT\n1\t0\t5\t0\t5\n2\t1\t3\t4\t7\n3\t2\t8\t6\t14",
      "conclusion": "The FCFS scheduling algorithm has been successfully implemented. The average waiting time and turnaround time can be calculated from the results. FCFS is simple but may lead to convoy effect.",
      "videoUrl": "https://www.youtube.com/embed/Jkyu2WzHgNg"
    }
  ],
  "computer-network": [
    {
      "experimentNo": 1,
      "title": "Socket Programming - TCP Client-Server",
      "aim": "To implement a simple TCP client-server communication using socket programming.",
      "theory": "Socket programming is a way of connecting two nodes on a network to communicate with each other. TCP (Transmission Control Protocol) provides reliable, connection-oriented communication between client and server.",
      "code": "// Server Code\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\nint main() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    char *hello = \"Hello from server\";\n    \n    server_fd = socket(AF_INET, SOCK_STREAM, 0);\n    setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt));\n    \n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(8080);\n    \n    bind(server_fd, (struct sockaddr *)&address, sizeof(address));\n    listen(server_fd, 3);\n    \n    new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen);\n    read(new_socket, buffer, 1024);\n    printf(\"Message from client: %s\\n\", buffer);\n    send(new_socket, hello, strlen(hello), 0);\n    \n    return 0;\n}",
      "output": "Server started on port 8080\nMessage from client: Hello from client\nMessage sent to client: Hello from server",
      "conclusion": "TCP socket programming has been successfully implemented. The server can accept connections from clients and exchange messages reliably.",
      "videoUrl": "https://www.youtube.com/embed/LtXEMwSG5-8"
    },
    {
      "experimentNo": 2,
      "title": "Network Packet Analysis using Wireshark",
      "aim": "To analyze network packets and understand protocol headers using Wireshark.",
      "theory": "Wireshark is a network protocol analyzer that captures and examines network traffic. It helps in understanding how different protocols work at various layers of the OSI model.",
      "code": "# Wireshark Filters for Analysis\n\n# Filter HTTP traffic\nhttp\n\n# Filter traffic for specific IP\nip.addr == 192.168.1.1\n\n# Filter TCP traffic on port 80\ntcp.port == 80\n\n# Filter DNS queries\ndns\n\n# Filter by protocol\ntcp or udp or icmp\n\n# Filter by packet size\nframe.len > 1000",
      "output": "Captured packets show:\n- HTTP requests and responses\n- TCP handshake process\n- DNS resolution queries\n- Various protocol headers (Ethernet, IP, TCP/UDP)",
      "conclusion": "Packet analysis using Wireshark provides deep insights into network communication, protocol behavior, and helps in troubleshooting network issues.",
      "videoUrl": "https://www.youtube.com/embed/7I7-TgLWH1k"
    }
  ],
  "database-management": [
    {
      "experimentNo": 1,
      "title": "Creating and Managing Database Tables",
      "aim": "To create a database, tables, and perform basic CRUD operations using SQL.",
      "theory": "SQL (Structured Query Language) is used to manage relational databases. DDL (Data Definition Language) commands like CREATE, ALTER, DROP are used to define database structure.",
      "code": "-- Create Database\nCREATE DATABASE university;\nUSE university;\n\n-- Create Students Table\nCREATE TABLE students (\n    student_id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    department VARCHAR(50)\n);\n\n-- Insert Data\nINSERT INTO students (name, email, age, department) VALUES\n('John Doe', 'john@email.com', 20, 'Computer Science'),\n('Jane Smith', 'jane@email.com', 21, 'Electronics'),\n('Bob Johnson', 'bob@email.com', 19, 'Mechanical');\n\n-- Select Data\nSELECT * FROM students;\n\n-- Update Data\nUPDATE students SET age = 22 WHERE name = 'John Doe';\n\n-- Delete Data\nDELETE FROM students WHERE student_id = 3;",
      "output": "+------------+------------+------------------+------+------------------+\n| student_id | name       | email            | age  | department       |\n+------------+------------+------------------+------+------------------+\n|          1 | John Doe   | john@email.com   |   22 | Computer Science |\n|          2 | Jane Smith | jane@email.com   |   21 | Electronics      |\n+------------+------------+------------------+------+------------------+",
      "conclusion": "Successfully created database tables and performed CRUD operations. SQL provides powerful tools for data management in relational databases.",
      "videoUrl": "https://www.youtube.com/embed/HXV3zeQKqGY"
    }
  ],
  "data-structures": [
    {
      "experimentNo": 1,
      "title": "Implementation of Stack using Array",
      "aim": "To implement stack data structure using array with push, pop, and display operations.",
      "theory": "Stack is a linear data structure that follows LIFO (Last In First Out) principle. Elements are added and removed from the same end called the top of the stack.",
      "code": "#include <stdio.h>\n#include <stdlib.h>\n#define MAX 100\n\nstruct Stack {\n    int data[MAX];\n    int top;\n};\n\nvoid initStack(struct Stack* s) {\n    s->top = -1;\n}\n\nint isEmpty(struct Stack* s) {\n    return s->top == -1;\n}\n\nint isFull(struct Stack* s) {\n    return s->top == MAX - 1;\n}\n\nvoid push(struct Stack* s, int value) {\n    if (isFull(s)) {\n        printf(\"Stack Overflow\\n\");\n        return;\n    }\n    s->data[++s->top] = value;\n    printf(\"Pushed %d\\n\", value);\n}\n\nint pop(struct Stack* s) {\n    if (isEmpty(s)) {\n        printf(\"Stack Underflow\\n\");\n        return -1;\n    }\n    return s->data[s->top--];\n}\n\nvoid display(struct Stack* s) {\n    if (isEmpty(s)) {\n        printf(\"Stack is empty\\n\");\n        return;\n    }\n    printf(\"Stack: \");\n    for (int i = 0; i <= s->top; i++) {\n        printf(\"%d \", s->data[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    struct Stack s;\n    initStack(&s);\n    \n    push(&s, 10);\n    push(&s, 20);\n    push(&s, 30);\n    display(&s);\n    \n    printf(\"Popped: %d\\n\", pop(&s));\n    display(&s);\n    \n    return 0;\n}",
      "output": "Pushed 10\nPushed 20\nPushed 30\nStack: 10 20 30\nPopped: 30\nStack: 10 20",
      "conclusion": "Stack implementation using array has been successfully completed. All basic operations (push, pop, display) work correctly with proper overflow and underflow handling.",
      "videoUrl": "https://www.youtube.com/embed/F1F2imiOJfk"
    }
  ],
  "software-engineering": [
    {
      "experimentNo": 1,
      "title": "Software Requirements Analysis and Documentation",
      "aim": "To analyze software requirements and create a Software Requirements Specification (SRS) document.",
      "theory": "Requirements analysis is the process of determining user expectations for a new or modified product. SRS document serves as a contract between the development team and stakeholders.",
      "code": "// Sample Requirements Analysis for Library Management System\n\n1. FUNCTIONAL REQUIREMENTS:\n   - User Registration and Authentication\n   - Book Search and Browse\n   - Book Issue and Return\n   - Fine Calculation\n   - Report Generation\n\n2. NON-FUNCTIONAL REQUIREMENTS:\n   - Performance: System should handle 1000 concurrent users\n   - Security: User data must be encrypted\n   - Usability: Interface should be intuitive\n   - Reliability: 99.9% uptime\n\n3. USE CASES:\n   - UC001: User Login\n   - UC002: Search Books\n   - UC003: Issue Book\n   - UC004: Return Book\n\n4. DATA REQUIREMENTS:\n   - User data (ID, Name, Email, Phone)\n   - Book data (ISBN, Title, Author, Category)\n   - Transaction data (Issue Date, Return Date, Fine)",
      "output": "SRS Document Created with:\n- 15 Functional Requirements\n- 8 Non-Functional Requirements\n- 12 Use Cases\n- 5 Data Entities\n- System Architecture Diagram\n- User Interface Mockups",
      "conclusion": "Requirements analysis helps in understanding stakeholder needs and provides a clear roadmap for development. Proper documentation prevents scope creep and miscommunication.",
      "videoUrl": "https://www.youtube.com/embed/zid-MVo7M-E"
    }
  ],
  "machine-learning": [
    {
      "experimentNo": 1,
      "title": "Linear Regression Implementation",
      "aim": "To implement linear regression algorithm from scratch and analyze its performance.",
      "theory": "Linear regression is a supervised learning algorithm that models the relationship between a dependent variable and independent variables by fitting a linear equation to observed data.",
      "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nclass LinearRegression:\n    def __init__(self):\n        self.slope = 0\n        self.intercept = 0\n    \n    def fit(self, X, y):\n        n = len(X)\n        sum_x = np.sum(X)\n        sum_y = np.sum(y)\n        sum_xy = np.sum(X * y)\n        sum_x_squared = np.sum(X * X)\n        \n        # Calculate slope and intercept\n        self.slope = (n * sum_xy - sum_x * sum_y) / (n * sum_x_squared - sum_x * sum_x)\n        self.intercept = (sum_y - self.slope * sum_x) / n\n    \n    def predict(self, X):\n        return self.slope * X + self.intercept\n\n# Generate sample data\nnp.random.seed(42)\nX = np.random.randn(100)\ny = 2 * X + 1 + np.random.randn(100) * 0.5\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(f'Slope: {model.slope:.4f}')\nprint(f'Intercept: {model.intercept:.4f}')\nprint(f'MSE: {mse:.4f}')\nprint(f'R²: {r2:.4f}')",
      "output": "Slope: 1.9876\nIntercept: 1.0234\nMSE: 0.2456\nR²: 0.9123\n\nModel Performance:\n- Training completed successfully\n- Good fit with R² = 0.9123\n- Low prediction error (MSE = 0.2456)",
      "conclusion": "Linear regression model has been successfully implemented and trained. The model shows good performance with high R² score, indicating that it captures the linear relationship well.",
      "videoUrl": "https://www.youtube.com/embed/7ArmBVF2dCs"
    }
  ]
} 